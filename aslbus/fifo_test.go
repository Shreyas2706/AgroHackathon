package aslbus

import (
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func TestFIFO(t *testing.T) {
	Convey("fifo testing", t, func() {
		buffer := NewFIFO(100)
		Convey("test push", func() {
			buffer.Push("12")
			buffer.Push("a")
			buffer.Push(40)
			So(buffer.Length(), ShouldEqual, 3)
		})
		Convey("test pop", func() {
			buffer.Push("12")
			buffer.Push("a")
			buffer.Push(40)
			So(buffer.Length(), ShouldEqual, 3)
			test := buffer.Pop()
			So(buffer.Length(), ShouldEqual, 2)
			So(test, ShouldEqual, "12")
			test = buffer.Pop()
			So(buffer.Length(), ShouldEqual, 1)
			So(test, ShouldEqual, "a")
			test = buffer.Pop()
			So(buffer.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, 40)
			test = buffer.Pop()
			So(buffer.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, nil)
		})
		Convey("test next", func() {
			next := buffer.Next()
			So(next, ShouldBeNil)
			buffer.Push("12")
			buffer.Push("a")
			buffer.Push(40)
			So(buffer.Length(), ShouldEqual, 3)
			next = buffer.Next().(string)
			So(next, ShouldEqual, "12")
			So(buffer.Length(), ShouldEqual, 3)
		})
		Convey("test items", func() {
			next := buffer.Next()
			So(next, ShouldBeNil)
			buffer.Push("12")
			buffer.Push("a")
			buffer.Push(40)
			items := buffer.Items()
			So(items[0].(string), ShouldEqual, "12")
			So(items[1].(string), ShouldEqual, "a")
			So(items[2].(int), ShouldEqual, 40)
		})
		Convey("test size", func() {
			bufSize := buffer.Size()
			So(bufSize, ShouldEqual, 100)
		})
		Convey("test set size", func() {
			buffer.SetSize(200)
			So(buffer.Size(), ShouldNotEqual, 100)
			So(buffer.Size(), ShouldEqual, 200)
		})
		Convey("test empty/full", func() {
			So(buffer.Empty(), ShouldBeTrue)
			So(buffer.Full(), ShouldBeFalse)
			good := buffer.Push("12")
			So(good, ShouldBeTrue)
			So(buffer.Empty(), ShouldBeFalse)
			So(buffer.Full(), ShouldBeFalse)
			buffer.SetSize(2)
			good = buffer.Push("23")
			So(good, ShouldBeTrue)
			So(buffer.Empty(), ShouldBeFalse)
			So(buffer.Full(), ShouldBeTrue)
			good = buffer.Push("50")
			So(good, ShouldBeFalse)
			So(buffer.Empty(), ShouldBeFalse)
			So(buffer.Full(), ShouldBeTrue)
		})
	})
	Convey("Map FIFO testing", t, func() {
		buffer := NewMapFIFO(100)
		Convey("test push", func() {
			good := buffer.Push("P0", "12")
			So(good, ShouldEqual, true)
			good = buffer.Push("N0", "a")
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, true)
			So(buffer.fifo.Length(), ShouldEqual, 3)
		})
		Convey("test next", func() {
			next := buffer.Next()
			So(next, ShouldBeNil)
			good := buffer.Push("N0", "a")
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, true)
			So(buffer.Next(), ShouldEqual, "a")
		})
		Convey("test size / set size", func() {
			size := buffer.Size()
			So(size, ShouldEqual, 100)
			buffer.SetSize(200)
			size = buffer.Size()
			So(size, ShouldNotEqual, 100)
			So(size, ShouldEqual, 200)
		})
		Convey("test empty/full", func() {
			So(buffer.Empty(), ShouldBeTrue)
			So(buffer.Full(), ShouldBeFalse)
			good := buffer.Push("P0", "12")
			So(good, ShouldBeTrue)
			So(buffer.Empty(), ShouldBeFalse)
			So(buffer.Full(), ShouldBeFalse)
			buffer.SetSize(2)
			good = buffer.Push("N1", 40)
			So(good, ShouldBeTrue)
			So(buffer.Empty(), ShouldBeFalse)
			So(buffer.Full(), ShouldBeTrue)
			good = buffer.Push("N0", "a")
			So(good, ShouldBeFalse)
			So(buffer.Empty(), ShouldBeFalse)
			So(buffer.Full(), ShouldBeTrue)
		})
		Convey("test pop", func() {
			good := buffer.Push("P0", "12")
			So(good, ShouldEqual, true)
			good = buffer.Push("N0", "a")
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, true)
			So(buffer.fifo.Length(), ShouldEqual, 3)
			test := buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 2)
			So(test, ShouldEqual, "12")
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 1)
			So(test, ShouldEqual, "a")
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, 40)
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, nil)
		})
		Convey("test pop/push reject ", func() {
			good := buffer.Push("P0", "12")
			So(good, ShouldEqual, true)
			good = buffer.Push("N0", "a")
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, false)
			So(buffer.fifo.Length(), ShouldEqual, 3)
			test := buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 2)
			So(test, ShouldEqual, "12")
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 1)
			So(test, ShouldEqual, "a")
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, 40)
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, nil)
		})
		Convey("test pop/push reject full fifo ", func() {
			good := buffer.Push("P0", "12")
			So(good, ShouldEqual, true)
			good = buffer.Push("N0", "a")
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, true)
			good = buffer.Push("N1", 40)
			So(good, ShouldEqual, false)
			So(buffer.fifo.Length(), ShouldEqual, 3)
			test := buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 2)
			So(test, ShouldEqual, "12")
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 1)
			So(test, ShouldEqual, "a")
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, 40)
			test = buffer.Pop()
			So(buffer.fifo.Length(), ShouldEqual, 0)
			So(test, ShouldEqual, nil)
			buffer.SetSize(4)

		})
	})
}
